#!/usr/bin/env node

var args = process.ARGV.slice(2),
    wdir = "./", //args.shift()
    prog = "node", //args.shift()
    child,
    fs = require("fs"),
    path = require("path"),
    watching = {},
    steppedInto = {}

function debug(s) {
  if(0)  
    console.log(s)
}

function watchDir(dir) {
  debug("looking inside dir " + dir)
  if(steppedInto[dir]) {
    debug("we've already stepped in here, skipping")
    return
  }
  steppedInto[dir] = true
  
  var files = fs.readdirSync(dir) 
  for(var i =0; i < files.length;i++) {
    var file = files[i]
    var fullPath = path.join(dir, file)

    try {
      var stats = fs.statSync(fullPath)        
      if(stats.isDirectory()) {
        if(!file.match(/^\./))  // ignore folders starting with .  
          watchDir(fullPath)
      }
      else if(file.match(/\.js$/))
        watch(fullPath)
    }
    catch(e) {
      debug(e.toString()) // statSync can throw exception e.g. with cyclic symbolic links
      debug("skipping")
    }
  }
}

function watch(source) {
  if(watching[source]) return
  watching[source] = true
  debug("watching " + source)
  return fs.watchFile(source, {
    persistent: true,
    interval: 500
  }, function(curr, prev) {
    if (curr.mtime.getTime() === prev.mtime.getTime()) {
      return null;
    }
    debug("=> Bouncing....")
    respawn()
  });
};


function spawn() {
  child = require('child_process').spawn(prog, args);
  console.log('Spawned ' + prog + " " + args.join(" ") + ", with PID=" + child.pid);
  child.stdout.on('data', function(data) {
    data = data.toString().replace(/\n$/,"")
    console.log(data);
  });
  child.stderr.on('data', function(data) {
    data = data.toString().replace(/\n$/,"")
    console.log(data);
  });
  return child.on('exit', function(code) {
    console.log('node exited with code ' + (code ? code.toString() : "null"));
    if(!expectingExit)
      process.exit(0)
  });
};

var expectingExit = false

function respawn() {
  expectingExit = true // will this work ? 
  if(child) child.kill()
  setTimeout(function() {
    spawn()
    expectingExit = false
  }, 250)
}

spawn();
watchDir(wdir);
setInterval(function() {
  watchDir(wdir);
}, 10000) // look for new files every 10s

