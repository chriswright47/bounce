#!/usr/bin/env node

// RUN LIKE 
var watchPaths, 
    child,
    fs = require("fs"),
    path = require("path"),
    watching = {},
    steppedInto = {},
    respawnOnExit = false,
    glob = require("glob"),
    growlNotify = false

var growl = require("growl")
command = process.ARGV[process.ARGV.length-1]
var args = process.ARGV
for(var i=0; i <args.length; i++) {
  var arg = args[i]
  if(arg == "-w") watchPaths = args[i+1].split(",")
  if(arg == "-r") respawnOnExit = true;
  if(arg == "-g") growlNotify = true;
  if(arg == "-h") usage()
}

function usage() {
  
  log("bounce -w [-r] [-g] 'command_to_run -a -b arg1 arg2' ")
  log("")
  log("-w: watch paths, comma separated. If using globs (*) then must be wrapped in quotes, e.g. 'lib/*.*' ")
  log("-r: respawn on child process exit")
  log("-g: growl notify on child process exit (needs growlnotify)")
  log("-h: show this usage")
  process.exit(0)
}


if(!command || !watchPaths || !watchPaths.length) {
  //log("Error: must provide command to run")
  usage()
}

function log() {
  console.log.apply(null, arguments)
}

function debug(s) {
  if(0)  
    log(s)
}

var files = []

for(var i in watchPaths) {
  files = files.concat(glob.globSync(watchPaths[i]))
}

function watchFiles(files) {
  for(var i in files) {
    log("Watching: " + files[i]);
    watch(files[i])
  }
}

function watch(source) {
  if(watching[source]) return
  watching[source] = true
  debug("watching " + source)
  return fs.watchFile(source, {
    persistent: true,
    interval: 500
  }, function(curr, prev) {
    if (curr.mtime.getTime() === prev.mtime.getTime()) {
      return null;
    }
    debug("=> Bouncing....")
    child.kill("SIGTERM")
  });
};


function spawn() {
  
  var args = command.split(" ")
  var prog = args.shift()
  //log(prog, args)
  child = require('child_process').spawn(prog, args);
  log('Spawned ' + prog + " " + args.join(" ") + ", with PID=" + child.pid);
  child.stdout.on('data', function(data) {
    data = data.toString().replace(/\n$/,"")
    log(data);
  });
  child.stderr.on('data', function(data) {
    data = data.toString().replace(/\n$/,"")
    log(data);
  });
  return child.on('exit', function(code, signal) {
    if(code == null && signal == "SIGTERM") 
      respawn()
    else {
      log('child exited with code ' + (code ? code.toString() : "null") + " and signal " + (signal ? signal.toString() : "null"));
      if(growlNotify)
        growl.notify(command + " child process exited with code " + (code ? code.toString() : "null"))
      if(respawnOnExit) {
        log("Respawning")
        respawn()
      }
      else {
        log("Exiting")
        process.exit(0)
      }
    }
  });
};


function respawn() {
  setTimeout(function() {
    spawn()
  }, 1000)
}

spawn();

watchFiles(files);
// setInterval(function() {
//   watchDir(wdir);
// }, 10000) // look for new files every 10s
