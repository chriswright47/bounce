#!/usr/bin/env node

var args = process.ARGV.slice(2)
var watchDir = args.shift()
var prog = args.shift()
var child
var fs = require("fs")

function load() {
  child = require('child_process').spawn(prog, args);
  console.log('Spawned ' + prog + args.join(" ") + ", with PID=" + child.pid);
  child.stdout.on('data', function(data) {
    data = data.toString().replace(/\n$/,"")
    console.log(data);
  });
  child.stderr.on('data', function(data) {
    data = data.toString().replace(/\n$/,"")
    console.log('child stderr: ' + data);
  });
  return child.on('exit', function(code) {
    console.log('child process exited with code ' + (code ? code.toString : "null"));
  });
};

load()

// only watches .js
function watchFiles(dir) {
  var files = fs.readdirSync(dir) 
  for(var i =0; i< files.length;i++) {
    var file = files[i]
    if(!file.match(/\.js$/)) continue
    watch(dir + "/" + file)
  }
}

watchFiles(watchDir)

function watch(source) {
  return fs.watchFile(source, {
    persistent: true,
    interval: 500
  }, function(curr, prev) {
    if (curr.mtime.getTime() === prev.mtime.getTime()) {
      return null;
    }
    console.log("CHANGED")
    respawn()
  });
};

function respawn() {
  child.kill()
  setTimeout(function() {
    load()
  }, 50)
}